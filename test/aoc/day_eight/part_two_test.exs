defmodule Aoc.DayEight.PartTwoTest do
  use ExUnit.Case
  import Aoc.DayEight.PartTwo

  @test_map_one """
                T.........
                ...T......
                .T........
                ..........
                ..........
                ..........
                ..........
                ..........
                ..........
                ..........
                """
                |> String.split("\n")

  @test_map_two """
                ............
                ........0...
                .....0......
                .......0....
                ....0.......
                ......A.....
                ............
                ............
                ........A...
                .........A..
                ............
                ............
                """
                |> String.split("\n")

  test "Gets all inline antinodes for one frequency" do
    map = Aoc.DayEight.PartOneAgain.parse(@test_map_one)

    anti_nodes = get_inline_antinodes(map, {0, 0}, {2, 1}, &next_sum/2) |> Enum.into(%MapSet{})

    assert anti_nodes ==
             [
               {0, 0},
               {2, 1},
               {4, 2},
               {6, 3},
               {8, 4}
             ]
             |> Enum.into(%MapSet{})
  end

  test "Gets antinodes" do
    assert part2(@test_map_one) == 9
    assert part2(@test_map_two) == 34
  end

  test "Completes Part Two" do
    count =
      Path.join(["priv", "aoc", "day_eight.txt"])
      |> File.stream!()
      |> part2()

    assert count == 1067
  end
end
